[1mdiff --git a/nefertari_mongodb/fields.py b/nefertari_mongodb/fields.py[m
[1mindex ecea467..ec49b2b 100644[m
[1m--- a/nefertari_mongodb/fields.py[m
[1m+++ b/nefertari_mongodb/fields.py[m
[36m@@ -363,6 +363,7 @@[m [mclass IdField(BaseFieldMixin, fields.ObjectIdField):[m
         primary_key = kwargs.pop('primary_key', None)[m
         super(IdField, self).__init__(*args, **kwargs)[m
         self._init_kwargs['primary_key'] = primary_key[m
[32m+[m[32m        self.db_field = '_id'[m
 [m
 [m
 class ForeignKeyField(BaseFieldMixin, fields.StringField):[m
[1mdiff --git a/nefertari_mongodb/metaclasses.py b/nefertari_mongodb/metaclasses.py[m
[1mindex a6c2f58..87fc520 100644[m
[1m--- a/nefertari_mongodb/metaclasses.py[m
[1m+++ b/nefertari_mongodb/metaclasses.py[m
[36m@@ -32,16 +32,24 @@[m [mclass DocumentMetaclass(MultiEngineMeta, Document.my_metaclass):[m
         """ Override class generation to add 'id' field to meta['id_field'][m
         so it's not overriden by ObjectIdField.[m
         """[m
[31m-        if 'id' in attrs and isinstance(attrs['id'], IdField):[m
[31m-            for attr, val in attrs.items():[m
[31m-                if getattr(val, 'primary_key', False):[m
[31m-                    break[m
[31m-            else:[m
[32m+[m[32m        idfield_present = False[m
[32m+[m[32m        for attr_name, attr in attrs.items():[m
[32m+[m[32m            if isinstance(attr, IdField):[m
                 attrs.setdefault('meta', {})[m
[31m-                attrs['meta']['id_field'] = 'id'[m
[31m-        return super(DocumentMetaclass, cls).__new__([m
[32m+[m[32m                attrs['meta']['id_field'] = attr_name[m
[32m+[m[32m                idfield_present = True[m
[32m+[m[32m                break[m
[32m+[m
[32m+[m[32m        new_class = super(DocumentMetaclass, cls).__new__([m
             cls, name, bases, attrs)[m
 [m
[32m+[m[32m        if idfield_present:[m
[32m+[m[32m            new_class._auto_id_field = True[m
[32m+[m[32m            fields = list(new_class._fields_ordered)[m
[32m+[m[32m            fields.remove(attr_name)[m
[32m+[m[32m            new_class._fields_ordered = (attr_name,) + tuple(fields)[m
[32m+[m[32m        return new_class[m
[32m+[m
     def __init__(self, name, bases, attrs):[m
         """ Override new class initialization to create backreferences. """[m
         super(DocumentMetaclass, self).__init__(name, bases, attrs)[m
[36m@@ -86,8 +94,8 @@[m [mclass DocumentMetaclass(MultiEngineMeta, Document.my_metaclass):[m
             # Add new field to `_fields_ordered`[m
             if (backref_name in target_cls._fields and[m
                     backref_name not in target_cls._fields_ordered):[m
[31m-                fields = list(target_cls._fields_ordered) + [backref_name][m
[31m-                target_cls._fields_ordered = sorted(fields)[m
[32m+[m[32m                fields = target_cls._fields_ordered + (backref_name,)[m
[32m+[m[32m                target_cls._fields_ordered = fields[m
 [m
             # Set new field as an attribute of target class[m
             setattr(target_cls, backref_name, backref_field)[m
[1mdiff --git a/nefertari_mongodb/tests/test_documents.py b/nefertari_mongodb/tests/test_documents.py[m
[1mindex af1054f..6bb3899 100644[m
[1m--- a/nefertari_mongodb/tests/test_documents.py[m
[1m+++ b/nefertari_mongodb/tests/test_documents.py[m
[36m@@ -69,7 +69,6 @@[m [mclass TestBaseMixin(object):[m
         class MyModel(docs.BaseDocument):[m
             _nested_relationships = ['parent'][m
             _nesting_depth = 0[m
[31m-            my_id = fields.IdField()[m
             name = fields.StringField(primary_key=True)[m
             status = fields.ChoiceField(choices=['active'])[m
             groups = fields.ListField(item_type=fields.IntegerField)[m
[36m@@ -89,7 +88,6 @@[m [mclass TestBaseMixin(object):[m
                     '_pk': {'type': 'string'},[m
                     '_version': {'type': 'long'},[m
                     'groups': {'type': 'long'},[m
[31m-                    'my_id': {'type': 'string'},[m
                     'name': {'type': 'string'},[m
                     'parent': {'type': 'string'},[m
                     'status': {'type': 'string'},[m
[36m@@ -140,7 +138,6 @@[m [mclass TestBaseMixin(object):[m
 [m
     def test_pk_field(self):[m
         class MyModel(docs.BaseDocument):[m
[31m-            my_id = fields.IdField()[m
             name = fields.StringField(primary_key=True)[m
 [m
         assert MyModel.pk_field() == 'name'[m
[36m@@ -290,13 +287,13 @@[m [mclass TestBaseDocument(object):[m
     def test_to_dict(self):[m
         class MyModel1(docs.BaseDocument):[m
             id = fields.IdField()[m
[31m-            name = fields.StringField(primary_key=True)[m
[32m+[m[32m            name = fields.StringField()[m
 [m
         obj = MyModel1(name='foo')[m
         assert obj.to_dict() == {[m
[31m-            '_pk': 'foo',[m
[32m+[m[32m            '_pk': 'None',[m
             '_type': 'MyModel1',[m
             '_version': 0,[m
[31m-            'id': 'foo',[m
[32m+[m[32m            'id': None,[m
             'name': 'foo',[m
         }[m
[1mdiff --git a/nefertari_mongodb/tests/test_meta.py b/nefertari_mongodb/tests/test_meta.py[m
[1mindex e1cce21..430deb4 100644[m
[1m--- a/nefertari_mongodb/tests/test_meta.py[m
[1m+++ b/nefertari_mongodb/tests/test_meta.py[m
[36m@@ -1,4 +1,4 @@[m
[31m-import mongoengine as mongo[m
[32m+[m[32mimport pytest[m
 [m
 from .. import documents as docs[m
 from .. import fields[m
[36m@@ -7,17 +7,19 @@[m [mfrom .. import fields[m
 class TestDocumentMetaclass(object):[m
     def test_id_field_set_to_meta(self):[m
         class Foo(docs.BaseDocument):[m
[31m-            id = fields.IdField()[m
[32m+[m[32m            my_id = fields.IdField()[m
 [m
[31m-        field = Foo._fields['id'][m
[32m+[m[32m        field = Foo._fields['my_id'][m
         assert isinstance(field, fields.IdField)[m
[31m-        assert Foo._meta['id_field'] == 'id'[m
[32m+[m[32m        assert Foo._meta['id_field'] == 'my_id'[m
[32m+[m[32m        assert Foo._fields_ordered[0] == 'my_id'[m
[32m+[m[32m        assert Foo._auto_id_field[m
 [m
     def test_id_field_not_set_to_meta(self):[m
[31m-        class Foo(docs.BaseDocument):[m
[31m-            id = fields.IdField()[m
[31m-            name = fields.StringField(primary_key=True)[m
 [m
[31m-        field = Foo._fields['id'][m
[31m-        assert isinstance(field, mongo.fields.ObjectIdField)[m
[31m-        assert Foo._meta['id_field'] == 'name'[m
[32m+[m[32m        with pytest.raises(Exception) as ex:[m
[32m+[m[32m            class Foo(docs.BaseDocument):[m
[32m+[m[32m                id = fields.IdField()[m
[32m+[m[32m                name = fields.StringField(primary_key=True)[m
[32m+[m
[32m+[m[32m        assert 'Multiple db_fields defined for: _id' in str(ex.value)[m
